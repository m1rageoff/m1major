from aiogram import Router, Bot, F
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
)
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest

from config import CHANNEL_ID, CHAT_ID, ADMIN_ID
from states import Form
from payment import create_payment, is_payment_successful
from sheets import append_row

router = Router()


async def is_user_subscribed(bot: Bot, user_id: int) -> bool:
    try:
        chat_member_channel = await bot.get_chat_member(CHANNEL_ID, user_id)
        chat_member_chat = await bot.get_chat_member(CHAT_ID, user_id)
        return (
            chat_member_channel.status in ["member", "administrator", "creator"]
            and chat_member_chat.status in ["member", "administrator", "creator"]
        )
    except TelegramBadRequest:
        return False


@router.message(CommandStart())
async def cmd_start(message: Message, bot: Bot, state: FSMContext):
    intro_text = (
        "üéÆ –ü—Ä–∏–≤–µ—Ç! –Ø –Æ—Ä–∏–π, –æ—Å–Ω–æ–≤–∞—Ç–µ–ª—å –∫–∏–±–µ—Ä—Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã M1.\n"
        "–ú—ã –Ω–µ –ø—Ä–æ—Å—Ç–æ –∫–∞—Ç–∞–µ–º ‚Äî –º—ã –∏–¥—ë–º –∑–∞ –ú–∞–∂–æ—Ä–æ–º.\n"
        "–•–æ—á–µ—à—å –∏–≥—Ä–∞—Ç—å –Ω–∞ —Ç–æ–ø–æ–≤–æ–º —É—Ä–æ–≤–Ω–µ, –∑–∞—è–≤–∏—Ç—å –æ —Å–µ–±–µ –Ω–∞ —Å—Ç—Ä–∏–º–∞—Ö –∏ –±—ã—Ç—å —á–∞—Å—Ç—å—é —Å–∏–ª—å–Ω–æ–π –¥–≤–∏–∂—É—Ö–∏?\n\n"
        "–û—Å—Ç–∞–≤–ª—è–π –∑–∞—è–≤–∫—É –∏ –∑–∞–ø–æ–ª–Ω—è–π –≤—Å—ë –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ.\n"
        "–°—é–¥–∞ –ø–æ–ø–∞–¥–∞—é—Ç –Ω–µ –≤—Å–µ ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ, –∫—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä—è–∂–µ–Ω –Ω–∞ –ø–æ–±–µ–¥—É.üî•"
    )
    await message.answer(intro_text)

    if await is_user_subscribed(bot, message.from_user.id):
        await message.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à Faceit –Ω–∏–∫:")
        await state.set_state(Form.faceit_nick)
    else:
        await message.answer(
            "‚ùó –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞:\n"
            "üì¢ –ö–∞–Ω–∞–ª: https://t.me/m1rageoff\n"
            "üí¨ –ß–∞—Ç: https://t.me/m1rageoff1\n\n"
            "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞–∂–º–∏—Ç–µ /start –∑–∞–Ω–æ–≤–æ."
        )


async def show_confirmation(message_or_call, state: FSMContext):
    data = await state.get_data()
    msg = (
        f"üîç –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Å–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö:\n\n"
        f"üîπ Faceit –Ω–∏–∫: {data.get('faceit_nick', '-')}\n"
        f"üîπ –°—Å—ã–ª–∫–∞: {data.get('faceit_link', '-')}\n"
        f"üîπ Email: {data.get('email', '-')}\n\n"
        f"–ï—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ ‚Äî –Ω–∞–∂–º–∏—Ç–µ ¬´‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ¬ª.\n"
        f"–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å ‚Äî –≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å."
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å Faceit –Ω–∏–∫", callback_data="edit_nick")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Å—Å—ã–ª–∫—É", callback_data="edit_link")],
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å email", callback_data="edit_email")],
        [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="confirm_data")]
    ])

    if isinstance(message_or_call, CallbackQuery):
        await message_or_call.message.edit_text(msg, reply_markup=keyboard)
    else:
        await message_or_call.answer(msg, reply_markup=keyboard)


@router.message(Form.faceit_nick)
async def process_nick(message: Message, state: FSMContext):
    await state.update_data(faceit_nick=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å Faceit:")
    await state.set_state(Form.faceit_link)


@router.message(Form.faceit_link)
async def process_link(message: Message, state: FSMContext):
    await state.update_data(faceit_link=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:")
    await state.set_state(Form.email)


@router.message(Form.email)
async def process_email(message: Message, state: FSMContext):
    await state.update_data(email=message.text)
    await show_confirmation(message, state)


@router.callback_query(F.data == "edit_nick")
async def edit_nick(call: CallbackQuery, state: FSMContext):
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π Faceit –Ω–∏–∫:")
    await state.set_state(Form.faceit_nick)


@router.callback_query(F.data == "edit_link")
async def edit_link(call: CallbackQuery, state: FSMContext):
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å:")
    await state.set_state(Form.faceit_link)


@router.callback_query(F.data == "edit_email")
async def edit_email(call: CallbackQuery, state: FSMContext):
    await call.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π email:")
    await state.set_state(Form.email)


@router.callback_query(F.data == "confirm_data")
async def handle_confirm_data(call: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    msg = (
        f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ–±—Ä–∞–Ω–∞:\n\n"
        f"üîπ Faceit –Ω–∏–∫: {data['faceit_nick']}\n"
        f"üîπ –°—Å—ã–ª–∫–∞: {data['faceit_link']}\n"
        f"üîπ Email: {data['email']}\n\n"
        f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ–ø–ª–∞—Ç–∏—Ç—å —É—á–∞—Å—Ç–∏–µ."
    )

    pay_button = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å 50‚ÇΩ", callback_data="pay_50")]
    ])

    await call.message.answer(msg, reply_markup=pay_button)


@router.callback_query(F.data == "pay_50")
async def handle_payment(call: CallbackQuery):
    url, _ = create_payment(call.from_user.id)

    await call.message.answer(
        "üí≥ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=url)]
        ])
    )
    await call.message.answer(
        "‚ùó–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="paid_50")]
        ])
    )


@router.callback_query(F.data == "paid_50")
async def handle_paid(call: CallbackQuery, state: FSMContext, bot: Bot):
    user_id = call.from_user.id

    if is_payment_successful(user_id):
        data = await state.get_data()
        data["telegram_id"] = user_id

        try:
            append_row(data)

            text = (
                f"üîî –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–ª–∞—Ç–∏–ª:\n\n"
                f"üÜî Telegram ID: {user_id}\n"
                f"üîπ Faceit –Ω–∏–∫: {data['faceit_nick']}\n"
                f"üîπ –°—Å—ã–ª–∫–∞: {data['faceit_link']}\n"
                f"üîπ Email: {data['email']}"
            )

            await bot.send_message(chat_id=ADMIN_ID, text=text)

            with open("paid_users.txt", "a", encoding="utf-8") as file:
                file.write(text + "\n\n")

            await call.message.answer(
                "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!\n"
                "üîó –î–æ–±–∞–≤—å –º–µ–Ω—è –≤ –¥—Ä—É–∑—å—è –Ω–∞ Faceit:\n"
                "https://www.faceit.com/ru/players/_xMIRAGEx_"
            )
            await call.message.answer("üôè –£–¥–∞—á–∏ –∏ –¥–æ –≤—Å—Ç—Ä–µ—á–∏ –≤ –∏–≥—Ä–µ!")
        except Exception as e:
            await call.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Google Sheets: {e}")
    else:
        await call.message.answer(
            "‚ùó –û–ø–ª–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É –∏–ª–∏ –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â—ë —Ä–∞–∑", callback_data="paid_50")]
            ])
        )
